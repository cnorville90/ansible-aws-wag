---
- name: Playbook to spin up an EC2 instance with a known AMI
  hosts: localhost
  gather_facts: false

  tasks:

    - name: Gather information about an AMI
      amazon.aws.ec2_ami_info:
        image_ids: "{{ aws_ami }}"
        region: "{{ aws_region }}"
      register: ami_return

    - name: Display AMI information
      ansible.builtin.debug:
        var: ami_return.images[0]['image_id']
      when:
        - ami_return.images[0]['image_id'] == aws_ami
        - ami_return.images[0]['state'] == "available"

    - name: Spin up an EC2 instance with the provided AMI ID
      amazon.aws.ec2_instance:
        name: "{{ gold_image_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ aws_ami }}"
        region: "{{ aws_region }}"
        key_name: "{{ aws_key_name }}"
        network:
          assign_public_ip: true
        security_group: "{{ aws_sec_grp }}"
        vpc_subnet_id: "{{ aws_vpc }}"
        wait: true
      register: ec2_spinup_return

    - name: Drill down to the AWS instance name
      ansible.builtin.debug:
        var: ec2_spinup_return.instances[0].public_dns_name

    - name: Set stats for the AWS instance we just spun up
      ansible.builtin.set_stats:
        data:
          aws_ec2_inventory_name: "{{ ec2_spinup_return.instances[0].public_dns_name }}"
          aws_ec2_instance_id: "{{ ec2_spinup_return.instances[0].instance_id }}"
        per_host: false
        aggregate: false

    - name: Lets make sure the instance is ready to go
      ansible.builtin.wait_for:
        port: 22
        host: "{{ inventory_hostname }}"
        search_regex: OpenSSH
        delay: 10
      vars:
        ansible_connection: local
      register: ec2_ready

    - name: Ec2 is ready for customization
      ansible.builtin.debug:
        msg: "EC2 Instance: {{ inventory_hostname }} is ready for customization"
      when:
        - ec2_ready.state == 'started'
